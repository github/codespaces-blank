import json
from datetime import datetime
from bson import ObjectId
from pymongo import MongoClient


# Helper Functions
def json_serializer(obj):
    if isinstance(obj, (datetime,)):
        return obj.isoformat()
    if isinstance(obj, ObjectId):
        return str(obj)
    raise TypeError("Type not serializable")


def delete_collection(client, db_name, col_name):
    db = client[db_name]
    db.drop_collection(col_name)


def delete_database(client, db_name):
    client.drop_database(db_name)


def list_databases(client):
    numbered_list = []
    counter = 1
    for db_name in client.list_database_names():
        if db_name not in ["admin", "local"]:
            numbered_list.append((counter, db_name, None))
            counter += 1
            db = client[db_name]
            for col_name in db.list_collection_names():
                numbered_list.append((counter, db_name, col_name))
                counter += 1
    return numbered_list


def delete_all_databases(client):
    for db_name in client.list_database_names():
        if db_name not in ["admin", "local"]:
            db = client[db_name]
            for col_name in db.list_collection_names():
                db.drop_collection(col_name)
            client.drop_database(db_name)


def backup_database(old_client):
    backup_data = {}
    for db_name in old_client.list_database_names():
        db = old_client[db_name]
        backup_data[db_name] = {}
        for col_name in db.list_collection_names():
            collection = db[col_name]
            backup_data[db_name][col_name] = list(collection.find())
    return backup_data


def restore_data(new_client, backup_data):
    for db_name, collections in backup_data.items():
        db = new_client[db_name]
        for col_name, documents in collections.items():
            collection = db[col_name]
            if documents:
                collection.insert_many(documents)
                
                
                
                
                
                
import re
import json
import io
from pyrogram import filters
from pyrogram.types import Message
from TanuMusic import app
from config import OWNER_ID, MONGO_DB_URI
from TanuMusic.misc import SUDOERS
from TanuMusic.utils.pastebin import Bin
from TanuMusic.utils.database import (
    delete_collection,
    delete_database,
    list_databases,
    delete_all_databases,
    backup_database,
    restore_data,
)


# Helper Function for Mongo URL
def get_mongo_url(message):
    if len(message.command) > 1:
        return message.command[1]
    return MONGO_DB_URI


# Commands
@app.on_message(filters.command(["mongochk"]))
async def mongo_check_command(client, message: Message):
    if len(message.command) < 2:
        await message.reply("Please provide your MongoDB URL with the command: `/mongochk your_mongo_url`")
        return
    ok = await message.reply_text("**Please wait, I am checking your MongoDB...**")
    mongo_url = message.command[1]

    try:
        with MongoClient(mongo_url, serverSelectionTimeoutMS=5000) as mongo_client:
            databases = mongo_client.list_database_names()
            result = f"**MongoDB URL** `{mongo_url}` **is valid**.\n\n**Available Databases:**\n"
            for db_name in databases:
                if db_name not in ["admin", "local"]:
                    result += f"\n`{db_name}`:\n"
                    db = mongo_client[db_name]
                    for col_name in db.list_collection_names():
                        result += f"  `{col_name}` ({db[col_name].count_documents({})} documents)\n"

        if len(result) > 4096:
            paste_url = await Bin(result)
            await ok.delete()
            await message.reply(f"**The database list is too long to send here. You can view it at:** {paste_url}")
        else:
            await ok.delete()
            await message.reply(result)

    except Exception as e:
        await ok.delete()
        await message.reply(f"**Failed to connect to MongoDB**\n\n**Your MongoDB is dead ‚ùå**\n\n**Error:** `{e}`")


@app.on_message(filters.command(["deletedb", "deldb"]) & filters.user(OWNER_ID))
async def delete_db_command(client, message: Message):
    if len(message.command) < 2:
        await message.reply("Please provide the database or collection to delete.")
        return

    try:
        mongo_url = get_mongo_url(message)
        with MongoClient(mongo_url, serverSelectionTimeoutMS=5000) as mongo_client:
            databases_and_collections = list_databases(mongo_client)

            if message.command[1].lower() == "all":
                delete_all_databases(mongo_client)
                await message.reply("**All databases and collections have been deleted successfully. üßπ**")
            else:
                await message.reply("Invalid command format.")
    except Exception as e:
        await message.reply(f"**Failed to delete databases:** {e}")


@app.on_message(filters.command(["transferdb"]) & filters.user(OWNER_ID))
async def transfer_db_command(client, message: Message):
    if len(message.command) < 3:
        await message.reply("Please provide both source and target MongoDB URLs.")
        return

    main_mongo_url = message.command[1]
    target_mongo_url = message.command[2]

    if not re.match(r"mongodb(?:\+srv)?:\/\/[^\s]+", target_mongo_url):
        await message.reply("**The target MongoDB URL format is invalid! ‚ùå**")
        return

    try:
        with MongoClient(main_mongo_url, serverSelectionTimeoutMS=5000) as main_client:
            backup_data = backup_database(main_client)
        with MongoClient(target_mongo_url, serverSelectionTimeoutMS=5000) as target_client:
            restore_data(target_client, backup_data)

        await message.reply("**Data transfer to the new MongoDB is successful! üéâ**")
    except Exception as e:
        await message.reply(f"**Data transfer failed:** {e}")